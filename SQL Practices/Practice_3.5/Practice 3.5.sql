-- CASE 1: 

CREATE TABLE customers (
    id INT PRIMARY KEY,
    first_name VARCHAR(256),
    last_name VARCHAR(256),
    email VARCHAR(256),
    phone VARCHAR(256)
);

CREATE TABLE products (
    id INT PRIMARY KEY,
    product_name VARCHAR(256),
    unit_price DECIMAL(10, 2),
    description VARCHAR(512)
);

CREATE TABLE orders (
    id INT PRIMARY KEY,
    order_date DATE,
    customer_id INT,
    product_id INT,
    FOREIGN KEY (customer_id) REFERENCES customers(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);

-- 1. Insert at least five customers, five products, and ten 
-- orders into the respective tables. Make sure that at least 
-- two customers have multiple orders, and at least two 
-- products are included in multiple orders.
INSERT INTO customers (id, first_name, last_name, email, phone) 
VALUES (1, 'John', 'Doe', 'johndoe@example.com', '5552361234'),
       (2, 'Jane', 'Smith', 'janesmith@example.com', '5557895678'),
       (3, 'Bob', 'Johnson', 'bjohnson@example.com', '5558959012'),
       (4, 'Alice', 'Lee', 'alee@example.com', '5554563456'),
       (5, 'David', 'Brown', 'dbrown@example.com', '5552587890');

INSERT INTO products (id, product_name, unit_price, description) 
VALUES (1, 'Widget A', 10.99, 'A high-quality widget'),
       (2, 'Widget B', 12.99, 'A premium widget'),
       (3, 'Widget C', 8.99, 'A budget widget'),
       (4, 'Widget D', 6.99, 'A basic widget'),
       (5, 'Widget E', 14.99, 'A deluxe widget');

INSERT INTO orders (id, order_date, customer_id, product_id) 
VALUES (1, '2022-01-01', 1, 1),
       (2, '2022-01-03', 2, 2),
       (3, '2022-01-05', 3, 3),
       (4, '2022-01-07', 4, 4),
       (5, '2022-01-09', 5, 5),
       (6, '2022-01-11', 1, 2),
       (7, '2022-01-13', 2, 3),
       (8, '2022-01-15', 3, 4),
       (9, '2022-01-17', 4, 5),
       (10, '2022-01-19', 1, 3);

-- 2. Write a query that retrieves the customer's first name, 
-- last name, email, and the number of orders they have 
-- placed. The results should be ordered by the number of 
-- orders in descending order
SELECT c.first_name, c.last_name, c.email, COUNT(o.id) AS num_orders
FROM customers c
LEFT JOIN orders o 
ON c.id = o.customer_id
GROUP BY o.customer_id
ORDER BY num_orders DESC;

-- 3. Write a query that retrieves the product name, the total 
-- number of orders for each product, and the total revenue 
-- generated by each product. The results should be ordered by 
-- the total revenue in descending order.
SELECT p.product_name,COUNT(o.id) AS num_orders,SUM(p.unit_price) AS total_revenue
FROM products p
INNER JOIN orders o
ON p.id=o.product_id
GROUP BY p.id
ORDER BY total_revenue DESC;

-- 4. Write a query that retrieves the first name, last name, 
-- email, and product name for each order. The results should 
-- only include orders where the customer has placed multiple 
-- orders.
SELECT c.first_name,c.last_name,c.email,p.product_name,count(o.id) AS num_orders
FROM customers c
INNER JOIN orders o
ON c.id = o.customer_id
INNER JOIN products p
ON o.product_id = p.id
group by o.customer_id
having count(o.id)>= 1;

-- 5. Write a query that retrieves the first name, last name, and 
-- email for each customer who has placed at least one order 
-- for a product with a unit price greater than $50.
SELECT c.first_name,c.last_name,c.email,p.product_name,count(o.id) AS num_orders,p.unit_price
FROM customers c
INNER JOIN orders o
ON c.id = o.customer_id
INNER JOIN products p
ON o.product_id = p.id
group by o.customer_id
having count(o.id)>= 1 and p.unit_price > 50;

-- 6. Write a query that retrieves the product name and the 
-- number of times it has been ordered, but only includes 
-- products that have been ordered more than once
SELECT p.product_name,count(o.id) AS num_orders
FROM products p
INNER JOIN orders o
ON p.id = o.product_id
group by product_id
HAVING count(o.id)>1;